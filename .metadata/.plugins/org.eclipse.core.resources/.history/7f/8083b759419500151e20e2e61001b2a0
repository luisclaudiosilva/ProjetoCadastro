package com.exemplo.controle;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.Scanner;
import java.sql.*; 
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;
import javax.management.Query;
import javax.servlet.http.Part;
import javax.swing.JOptionPane;

import com.exemplo.entidade.Regra;

@ManagedBean
public class ImportadorBean {
	

	
	private static final int MAX_SIZE = 2 * 1024 * 1024;

	private Part arquivo; 

    public void importa(){
       try {
			String conteudo = new Scanner(arquivo.getInputStream()).useDelimiter("\\A").next();
			 if ((conteudo.toLowerCase().contains("5".toLowerCase())) && (conteudo.toLowerCase().contains("EOF".toLowerCase()) ) ) 
			 {  
				 
				 Connection conn = null;   
			    	java.sql.Statement st;
			    	
			    	Connection conn2 = null;   
			    	java.sql.Statement st2;

			    	try   
			    	{  
			    		String userName = "Luis";
			    	    String password = "6871";
			    		String url = "jdbc:mysql://localhost";
			    		
			    	    // Este é um dos meios para registrar um driver   
			    	    Class.forName("com.mysql.jdbc.Driver");  
			    	   
			    	    // Registrado o driver, vamos estabelecer uma conexão  
			    	    conn = DriverManager.getConnection(url, userName, password); 
			    	    conn2 = DriverManager.getConnection(url, userName, password); 
			    	    System.out.println ("Conexão com o BD estabelecida!");

			    	    // Após estabelecermos a conexão com o banco de dados  
			    	    // Utilizamos o método createStatement de con para criar o Statement  
			    	    st = conn.createStatement(); 
			    	    st2 = conn2.createStatement();

			    	    // Definido o Statement, executamos a query no banco de dados  
			    	    ResultSet rs = st.executeQuery("SELECT * FROM loja.regra ORDER BY prioridade ASC"); 
			    	    ResultSet rs2 = st2.executeQuery("SELECT * FROM loja.cliente"); 
			    	   
			    	    while(rs2.next() && rs.next()){  

			    	       // Os métodos getXXX recuperam os dados de acordo com o tipo SQL do dado:  
			    	       int pri = rs.getInt("prioridade"); 
			    	       String nome = rs.getString("nome");  
			    	       String direcao = rs.getString("direcao");  
			    	       String origem =  rs.getString("origem");
			    	       String destino = rs.getString("destino");
			    	       String protocolo = rs.getString("protocolo");
			    	       String portaInicial = rs.getString("portaInicial");
			    	       String portaFinal = rs.getString("portaFinal");
			    	       String acao = rs.getString("acao");
			    	       
			    	       String ori = rs2.getString("origem");
			    	       String dest = rs2.getString("destino");
			    	       String prot = rs2.getString("protocolo");
			    	       String port = rs2.getString("porta");
			    	       
			    	       if(direcao.equals( "ENTRADA")){
			    	    		
			    	    		if (origem.equals( ori ))
			    	      	   {
			    	      		   JOptionPane.showMessageDialog(null,"Pacote\nOrigem: " + ori + "\nDestino: " + dest+ "\nProtocolo: " + prot + "\nPorta: " + port + "\n--------------\nRegra\nNome: "+nome+"\nOrigem: " + origem + "\nAção: " +acao);
			    	      	   }else{
			    	      		   //JOptionPane.showMessageDialog(null, "Origem diferente!");
			    	      	   }
			    	    		
			    	    		if (destino.equals( dest ))
			    	       	   {
			    	    			JOptionPane.showMessageDialog(null,"Pacote\nOrigem: " + ori + "\nDestino: " + dest+ "\nProtocolo: " + prot + "\nPorta: " + port + "\n--------------\nRegra\nNome: "+nome+"\nDestino: " + destino + "\nAção: " +acao);
			    	       	   }else{
			    	       		   //JOptionPane.showMessageDialog(null, "Ip Destino diferente!");
			    	       	   }
			    	    		
			    	    		if (protocolo.equals( prot )) 
			    	        	   {
			    	    			JOptionPane.showMessageDialog(null,"Pacote\nOrigem: " + ori + "\nDestino: " + dest+ "\nProtocolo: " + prot + "\nPorta: " + port + "\n--------------\nRegra\nNome: "+nome+"\nProtocolo: " + protocolo + "\nAção: " +acao);
			    	        	   }else{
			    	        		  //JOptionPane.showMessageDialog(null, "Protocolo diferente!");
			    	        	   }
			    	    		
			    	    		if (portaInicial.equals( port ))
			    	     	   {
			    	    			JOptionPane.showMessageDialog(null,"Pacote\nOrigem: " + ori + "\nDestino: " + dest+ "\nProtocolo: " + prot + "\nPorta: " + port + "-Porta Inicial\n--------------\nRegra\nNome: "+nome+"\nPorta Inicial: " + portaInicial + "\nAção: " +acao);
			    	     	   }else{
			    	     		  // JOptionPane.showMessageDialog(null, "Porta diferente!");
			    	     	   }
			    	    		
			    	    		if (portaFinal.equals( port ))
			    	      	   {
			    	    			JOptionPane.showMessageDialog(null,"Pacote\nOrigem: " + ori + "\nDestino: " + dest+ "\nProtocolo: " + prot + "\nPorta: " + port + "-Porta Final\n--------------\nRegra\nNome: "+nome+"\nPorta Final: " + portaFinal + "\nAção: " +acao);
			    	      	   }else{
			    	      		  // JOptionPane.showMessageDialog(null, "Porta diferente!");
			    	      	   }
			    	    		
			    	    		
			    	    		
			    	    	}
			    	        
 
			    	    }
			    	  
			    	    String origem =  rs.getString("origem");
			    	    String ori = "200.253.32.3";
			    	    if(origem.equals(ori)){
			    	    JOptionPane.showMessageDialog(null, "NENHUMA REGRA ATINGIU O PACOTE!");
			    	    }
			    	    
			    	}
			    	    
			    	   
			    	
			    	 
			    	catch(SQLException e)  
			    	{  
			    	    // se houve algum erro, uma exceção é gerada para informar o erro   
			    	    e.printStackTrace(); //vejamos que erro foi gerado e quem o gerou  
			    	} catch (ClassNotFoundException e) {
			    		// TODO Auto-generated catch block
			    		e.printStackTrace();
			    	}  
			    	finally  
			    	{  
			    	   try   
			    	   {  
			    	      conn.close();  
			    	   }  
			    	   catch(SQLException onConClose)  
			    	   {  
			    	       System.out.println("Houve erro no fechamento da conexão");  
			    	       onConClose.printStackTrace();  
			    	   } 
			    	}
			    	 // fim do bloco try-catch-finally  
			    	/*String origem =  rs.getString("origem");
			    	if (origem.equals( ori ))
		    	    {
		    	    	JOptionPane.showMessageDialog(null, "NENHUMA REGRA ATINGIU O PACOTE!");
		    	    }*/
				 
			 } else{
	    	   JOptionPane.showMessageDialog(null, "Não contem a quantidade de pacote! \n \nNão contem EOF!");
	    	   
			 }
			 
			
        } catch (IOException e) 
       {
            // trata o erro
        }
    }
	
    	
 

			 
			 
			 
			
     
    
 // getter e setter


	










	public Part getArquivo() {
		return arquivo;
	}

	public void setArquivo(Part arquivo) {
		this.arquivo = arquivo;
	}
	
	public void valida(FacesContext context, UIComponent component, Object value) {

        Part arquivo = (Part) value;

        if (arquivo.getSize() > MAX_SIZE) {
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, 
                    "Arquivo muito grande", "O arquivo deve ter o tamanho máximo de 2mb.");
            throw new ValidatorException(msg);
        }

        if (!"text/plain".equals(arquivo.getContentType())) {
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, 
                    "Tipo de arquivo inválido", "O arquivo deve ser do tipo texto.");
            throw new ValidatorException(msg);
        }
    }

    
	
}
